{"version":3,"sources":["components/views/items.module.css","app.module.css","route/routes.js","route/index.js","components/views/Main.js","components/views/About.js","components/views/Help.js","components/views/Items.js","components/views/Item.js","App.js","serviceWorker.js","index.js","route/routes.module.css"],"names":["module","exports","Routes","props","classes","location","onClick","className","to","toLowerCase","getProps","style","textDecoration","routes","Nav","useState","toggle","setToggle","toggleHandler","styles","open","menu","map","r","key","disc","l5","Main","About","Help","slugs","Items","Card","display","minWidth","variant","elem","i","CardContent","content","Typography","title","color","gutterBottom","Item","itemId","App","app","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1b14fb64.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"items_title__28Ub9\",\"content\":\"items_content__BeioQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__cewju\"};","import React, { Fragment } from 'react'\nimport { Link } from '@reach/router'\n\nconst Routes = (props) => {\n  const { classes, location, onClick } = props\n  return (\n    <Fragment>\n      <Link\n        onClick={onClick}\n        className={classes}\n        to={location === 'Home' ? '/' : location.toLowerCase()}\n        getProps={() => {\n          return {\n            style: {\n              textDecoration: 'none',\n            },\n          }\n        }}>\n        <span>{location}</span>\n      </Link>\n    </Fragment>\n  )\n}\n// const Nav = () => (\n//   <>\n//     <div className={styles.navbar}>\n//       <nav>\n//         <Link to=\"/\">Home</Link> | <Link to=\"about\">About</Link> |{' '}\n//         <Link to=\"items\">Items</Link>\n//       </nav>\n//     </div>\n//   </>\n// )\n\nexport default Routes\n","import React, { useState, Fragment } from 'react'\nimport styles from './routes.module.css'\nimport Routes from './routes'\n\nconst routes = [\n  {\n    classes: 'l1',\n    location: 'Items',\n  },\n  {\n    classes: 'l2',\n    location: 'About',\n  },\n  {\n    classes: 'l3',\n    location: 'Help',\n  },\n  {\n    classes: 'l4',\n    location: 'Home',\n  },\n]\n\nconst Nav = () => {\n  const [toggle, setToggle] = useState(false)\n  const toggleHandler = () => setToggle(!toggle)\n  return (\n    <Fragment>\n      <nav\n        className={toggle ? `${styles.open} ${styles.menu}` : `${styles.menu}`}>\n        {routes.map((r) => (\n          <Routes\n            key={`${r.location}-${r.classes}`}\n            onClick={toggleHandler}\n            classes={`${styles.disc} ${styles[r.classes]}`}\n            location={r.location}\n          />\n        ))}\n        <button\n          className={`${styles.disc} ${styles.l5} ${styles.toggle} ${styles.menu}`}\n          onClick={toggleHandler}>\n          <span>\n            <span>Menu</span>\n          </span>\n        </button>\n      </nav>\n    </Fragment>\n  )\n}\n\nexport default Nav\n","import React from 'react'\n\nconst Main = () => <h1>Welcome Page</h1>\n\nexport default Main\n","import React from 'react'\n\nconst About = () => (\n  <div>\n    <h1>About Page</h1>\n  </div>\n)\n\nexport default About\n","import React from 'react'\n\nconst Help = () => (\n  <div>\n    <h1>Help Page</h1>\n  </div>\n)\n\nexport default Help\n","import React from 'react'\nimport { Link } from '@reach/router'\nimport styles from './items.module.css'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Typography from '@material-ui/core/Typography'\n\nconst slugs = [1, 2, 3, 'stuff', 'goes', 'here']\n\nconst Items = () => (\n  <div>\n    <Card style={{ display: 'inline-block', minWidth: 275 }} variant=\"outlined\">\n      {slugs.map((elem, i) => (\n        <Link\n          key={`${elem}-${i}`}\n          to={`${elem}`}\n          // {...props}\n          getProps={() => {\n            return {\n              style: {\n                textDecoration: 'none',\n              },\n            }\n          }}>\n          <CardContent className={`${styles.content}`}>\n            <Typography\n              className={`${styles.title}`}\n              color=\"textSecondary\"\n              gutterBottom>\n              Item {elem}\n            </Typography>\n          </CardContent>\n        </Link>\n      ))}\n    </Card>\n  </div>\n)\n\nexport default Items\n","import React from 'react'\n\nconst Item = (props) => <h1>Sub-route: {props.itemId}</h1>\n\nexport default Item\n","import React from 'react'\nimport { Router } from '@reach/router'\nimport styles from './app.module.css'\nimport Nav from './route'\nimport Main from './components/views/Main'\nimport About from './components/views/About'\nimport Help from './components/views/Help'\nimport Items from './components/views/Items'\nimport Item from './components/views/Item'\n\nfunction App() {\n  return (\n    <div className={styles.app}>\n      <Nav />\n      <Router>\n        <Main path=\"/\" />\n        <About path=\"about\" />\n        <Help path=\"help\" />\n        <Items path=\"items\" />\n        <Item path=\"items/:itemId\" />\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navbar\":\"routes_navbar__jnEgl\",\"menu\":\"routes_menu__3Qz6f\",\"open\":\"routes_open__2UsoR\",\"disc\":\"routes_disc__2cuCu\",\"l1\":\"routes_l1__p3laM\",\"toggle\":\"routes_toggle__EAbeC\",\"l2\":\"routes_l2__1wp3N\",\"l3\":\"routes_l3__1QWK7\",\"l4\":\"routes_l4__1DdDB\",\"l5\":\"routes_l5__3x02O\"};"],"sourceRoot":""}